<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Echo_Blog</title>
  <icon>https://www.gravatar.com/avatar/46b1ed1d11314994abe34ef4eaed312b</icon>
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-03-19T15:21:46.331Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Echo_qw</name>
    <email>wqw923573@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计算机网络 第二章 物理层</title>
    <link href="http://example.com/2022/03/18/2022-3%E6%96%87%E7%AB%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%20%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E7%89%A9%E7%90%86%E5%B1%82/"/>
    <id>http://example.com/2022/03/18/2022-3%E6%96%87%E7%AB%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%20%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E7%89%A9%E7%90%86%E5%B1%82/</id>
    <published>2022-03-17T16:00:00.000Z</published>
    <updated>2022-03-19T15:21:46.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机网络-第二章-物理层"><a href="#计算机网络-第二章-物理层" class="headerlink" title="计算机网络 第二章 物理层"></a>计算机网络 第二章 物理层</h1><h2 id="通信基础"><a href="#通信基础" class="headerlink" title="通信基础"></a>通信基础</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>物理层解决如何在连接各种计算机的传输媒体上传输数据比特流，而不是指具体的传输媒体。 物理层主要任务：确定与传输媒体接口有关的一些特性–&gt;<strong>定义标准</strong>。</p><h4 id="四个特性"><a href="#四个特性" class="headerlink" title="四个特性"></a>四个特性</h4><h5 id="机械特性"><a href="#机械特性" class="headerlink" title="机械特性"></a>机械特性</h5><p>定义物理连接的特性，规定物理连接时所采用的规格、接口形状、引线数目、引脚数量和排列情况。</p><h5 id="电气特性"><a href="#电气特性" class="headerlink" title="电气特性"></a>电气特性</h5><p>规定传输二进制位时，线路上信号的电压范围、阻抗匹配、传输速率和距离限制等。</p><h5 id="功能特性"><a href="#功能特性" class="headerlink" title="功能特性"></a>功能特性</h5><p>指明某条线上出现的某一电平表示何种意义，接口部件的信号线的用途。</p><h5 id="规程特性"><a href="#规程特性" class="headerlink" title="规程特性"></a>规程特性</h5><p>（过程特性）定义各条物理线路的工作规程和时序关系。</p><h4 id="三种通信方式"><a href="#三种通信方式" class="headerlink" title="三种通信方式"></a>三种通信方式</h4><h5 id="单工通信"><a href="#单工通信" class="headerlink" title="单工通信"></a>单工通信</h5><p>只有一个方向的通信而没有反方向的交互，仅需要一条信道。比如：广播</p><h5 id="半双工通信-双向交替通信"><a href="#半双工通信-双向交替通信" class="headerlink" title="半双工通信/双向交替通信"></a>半双工通信/双向交替通信</h5><p>通信的双方都可以发送或接收信息，但任何一方都不能同时发送和接收， 需要两条信道。比如：对讲机</p><h5 id="全双工通信-双向同时通信"><a href="#全双工通信-双向同时通信" class="headerlink" title="全双工通信/双向同时通信"></a>全双工通信/双向同时通信</h5><p>通信双方可以同时发送和接受信息，也需要两条信道。比如：打电话</p><h4 id="两种传输方式"><a href="#两种传输方式" class="headerlink" title="两种传输方式"></a>两种传输方式</h4><h5 id="串行传输"><a href="#串行传输" class="headerlink" title="串行传输"></a>串行传输</h5><p>将表示一个字符的8位二进制数按由低位到高位的顺序依次发送，速度慢，费用低，适合远距离。类似于：单道公路 一辆一辆车放行</p><h5 id="并行传输"><a href="#并行传输" class="headerlink" title="并行传输"></a>并行传输</h5><p>将表示一个字符的8位二进制数同时通过8条信道发送，速度快，费用高，适合近距离。类似于：多道公路</p><h4 id="同步传输-amp-异步传输"><a href="#同步传输-amp-异步传输" class="headerlink" title="同步传输&amp;异步传输"></a>同步传输&amp;异步传输</h4><h5 id="同步传输"><a href="#同步传输" class="headerlink" title="同步传输"></a>同步传输</h5><p>在同步传输的模式下，数据的传送是以一个<strong>数据区块</strong>为单位，因此同步传输又称为区块传输。 在传送数据时，需先送出1个或多个同步字符，再送出整批的数据。</p><h5 id="异步传输"><a href="#异步传输" class="headerlink" title="异步传输"></a>异步传输</h5><p>异步传输将比特分成小组进行传送，小组可以是8位的1个字符或更长。发送方可以在任何时刻 发送这些比特组，而接收方不知道它们会在什么时候到达。传送数据时，加一个字符起始位和一个字符终 止位。</p><h4 id="数据通信基础知识"><a href="#数据通信基础知识" class="headerlink" title="数据通信基础知识"></a>数据通信基础知识</h4><h5 id="码元"><a href="#码元" class="headerlink" title="码元"></a>码元</h5><p>码元是指用一个固定时长的信号波形（数字脉冲），代表不同离散数值的基本波形，是数字通信中数字信号的计 量单位，这个时长内的信号称为k进制码元，而该时长称为码元宽度。当码元的离散状态有M个时（M大于2）， 此时码元为M进制码元。 1码元可以携带多个比特的信息量。例如，在使用二进制编码时，只有两种不同的码元，一种代表0状态，另一种代 表1状态。</p><p>例如：K进制码元 4进制码元 码元的离散状态有4个 4种高低不同的信号波形 00、01、10、11</p><h5 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h5><p>速率也叫数据率，是指数据的传输速率，表示单位时间内传输的数据量。可以用码元传输速率和信息传输速率表示。</p><p><strong>码元传输速率</strong>：别名码元速率、波形速率、调制速率、符号速率等，它表示单位时间内数字通信系统所传输的 码元个数（也可称为脉冲个数或信号变化的次数），单位是波特（Baud）。1波特表示数字通信系统每秒传输一个 码元。</p><p><strong>信息传输速率</strong>：别名信息速率、比特率等，表示单位时间内数字通信系统传输的二进制码元个数（即比特数）， 单位是比特/秒（b/s）。</p><p>关系：若一个码元携带n bit的信息量，则M Baud的码元传输速率所对应的信息传输速率为M×n bit/s。</p><h5 id="波特（Baud）"><a href="#波特（Baud）" class="headerlink" title="波特（Baud）"></a>波特（Baud）</h5><p>表示单位时间内数字通信系统所传输的码元个数，1波特表示数字通信系统每秒传输一个 码元。</p><h5 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h5><p>带宽应用的领域非常多，可以用来标识信号传输的数据传输能力、标识单位时间内通过链路的数据量、标识显示器的显示能力。</p><p><strong>在模拟信号系统又叫频宽</strong>，是指在固定的时间可传输的资料数量，亦即在传输管道中可以传递数据的能力。通常以每秒传送周期或赫兹(Hz)来表示。</p><p><strong>在数字设备中</strong>，带宽指单位时间能通过链路的数据量。通常以bps来表示，即每秒可传输之位数。</p><h3 id="两个公式"><a href="#两个公式" class="headerlink" title="两个公式"></a>两个公式</h3><h4 id="奈氏准则"><a href="#奈氏准则" class="headerlink" title="奈氏准则"></a>奈氏准则</h4><p>奈氏准则：在理想低通（无噪声，带宽受限）条件下，为了避免码间串扰，极限码元传输速率为2W Baud（波特），W是信道带宽，单位为Hz。</p><p>[<img src="https://s1.ax1x.com/2022/03/19/qVQleU.png" alt="brUIkn.png">]</p><p>1.在任何信道中，码元传输的速率是有上限的。若传输速率超过此上限，就会出现严重的码间串扰问题，使接收端对码元的完全正确识别成为不可能。</p><p>2.信道的频带越宽（即能通过的信号高频分量越多），就可以用更高的速率进行码元的有效传输。</p><p>3.奈氏准则给出了码元传输速率的限制，但并没有对信息传输速率给出限制。</p><p>4.由于码元的传输速率受奈氏准则的制约，所以要提高数据的传输速率，就必须设法使每个码元能携带更多个比特的信息量，这就需要采用多元制的调制方法。</p><p>例子：</p><p>[<img src="https://s1.ax1x.com/2022/03/19/qVQ3o4.png" alt="brUIkn.png">]</p><h4 id="香农定理"><a href="#香农定理" class="headerlink" title="香农定理"></a>香农定理</h4><p>香农定理：在带宽受限且有噪声的信道中，为了不产生误差，信息的数据传输速率有上限值。</p><p>[<img src="https://s1.ax1x.com/2022/03/19/qVQ1wF.png" alt="brUIkn.png">]</p><p>1.信道的带宽或信道中的信噪比越大，则信息的极限传输速率就越高。</p><p>2.对一定的传输带宽和一定的信噪比，信息传输速率的上限就确定了。</p><p>3.只要信息的传输速率低于信道的极限传输速率，就一定能找到某种方法来实现无差错的传输。</p><p>4.香农定理得出的为极限信息传输速率，实际信道能达到的传输速率要比它低不少。</p><p>5.从香农定理可以看出，若信道带宽W或信噪比S/N没有上限（不可能），那么信道的极限信息传输速率也就没有上限。</p><p>噪声：噪声存在于所有的电子设备和通信信道中。由于噪声随机产生，它的瞬时值有时会很大，因此噪声会使接收端对码元的判决产生错误。但是噪声的影响是相对的，若信号较强，那么噪声影响相对较小。因此，信噪比就很重要。信噪比=信号的平均功率/噪声的平均功率，常记为S/N，并用分贝（dB）作为度量单位，即：</p><p><strong>信噪比（dB）=10log10(S/N)数值等价</strong></p><p>例子：</p><p>[<img src="https://s1.ax1x.com/2022/03/06/brUIkn.jpg" alt="brUIkn.jpg">]</p><h3 id="编码-amp-调制"><a href="#编码-amp-调制" class="headerlink" title="编码&amp;调制"></a>编码&amp;调制</h3><p>（<strong>1）非归零编码【NRZ】</strong> 编码容易实现，但没有检错功能， 且无法判断一个码元的开始和结 束，以至于收发双方难以保持同 步。</p><p><strong>（2）曼彻斯特编码</strong> 每一个码元都被调成两个电平， 所以数据传输速率只有调制速率 的1/2。</p><p><strong>（3）差分曼彻斯特编码</strong>  <strong>同 1 异 0</strong> 常用于局域网传输，其规则是： 若码元为1，则前半个码元的电平 与上一个码元的后半个码元的电 平相同，若为0，则相反。该编码 的特点是，在每个码元的中间， 都有一次电平的跳转，可以实现 自同步，且抗干扰性强于曼彻斯特编码</p><p><strong>（4）归零编码【RZ】</strong> 信号电平在一个码元之内都要恢 复到零的这种编码成编码方式。</p><p>[<img src="https://s1.ax1x.com/2022/03/19/qVQGFJ.png" alt="brUIkn.png">]</p><p><strong>信道：</strong>信号的传输媒介。一般用来表示向某一个方向传送信息的介质，因此一条通信线路往往包含一 条发送信道和一条接收信道。</p><h4 id="信道上传-送的信号"><a href="#信道上传-送的信号" class="headerlink" title="信道上传 送的信号"></a>信道上传 送的信号</h4><p><strong>基带信号</strong></p><p>将数字信号1和0直接用两种不同的电压表示，再送到数字信道上去传输（基带传输）。 <strong>来自信源</strong>的信号，像计算机输出的代表各种文字或图像文件的数据信号都属于基带信 号。基带信号就是发出的<strong>直接表达了要传输的信息的信号</strong>，比如我们说话的声波就是 基带信号。</p><p><strong>宽带信号</strong></p><p>将基带信号进行调制后形成的频分复用模拟信号，再传送到模拟信道上去传输（宽带传输）。把基带信号经过<strong>载波调制</strong>后，<strong>把信号的频率范围搬移到较高的频段以便在信道中传输</strong>（既仅在一段频率范围内能够通过信道）。</p><p><strong>提示：</strong></p><p>在传输距离较近时，计算机网络采用基带传输方式（近距离衰减小，从而信号内容不易发生变化） </p><p>在传输距离较远时，计算机网络采用宽带传输方式（远距离衰减大，即使信号变化大也能最后过滤出来基带信号）</p><h3 id="数据交换方式"><a href="#数据交换方式" class="headerlink" title="数据交换方式"></a>数据交换方式</h3><h4 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h4><p>在数据传输期间，源结点与目的结 点之间有一条由中间结点构成的专 用物理连接线路，在数据传输结束 之前，这条线路一直保持。</p><p><strong>特点：</strong>独占资源，用户始终占用端到端的固定传输带宽。适用于远 程批处理信息传输或系统间实时性要求高的大量数据传输的情况。</p><p><strong>优点</strong>：</p><p>​    1.传输时延小 </p><p>​    2.数据顺序传送，无失序问题 </p><p>​    3.实时性强，双方一旦建立物理通路，便可以实时通信， 适用于交        互式会话类通信。</p><ol start="4"><li>全双工通信，没有冲突，通信双方有不同的信道，不 会争用物理信道</li><li>适用于模拟信号和数字信号</li><li>控制简单，电路的交换设备及控制较简单</li></ol><p><strong>缺点</strong>：</p><p>   1.建立连接时间长 </p><ol start="2"><li>线路独占，即使通信线路空闲，也不能供其他用户使 用，信道使用效率低。</li><li>灵活性差，双方连接通路中的任何一点出了故障，必 须重新拨号建立新连接，不适应突发性通信。</li><li>无数据存储能力，难以平滑通信量。</li><li>电路交换时，数据直达，不同类型、不同规格、不同 速率的终端很难相互进行通信</li><li>无法发现与纠正传输差错，难以在通信过程中进行差 错控制。</li></ol><h4 id="报文交换"><a href="#报文交换" class="headerlink" title="报文交换"></a>报文交换</h4><p>报文(message)是网络中交换与传输的数据单元，即站点一次性要发送的数据块。报文包含了将要发送的 完整的数据信息，其长短很不一致，长度不限且可变。无需在两个站点之间建立一条专用通路，其数据传输的单 位是报文，传送过程采用存储转发方式。</p><p><strong>优点</strong>：</p><ol><li>无需建立连接，无建立连接时延，用户可随时发送报 文。</li><li>动态分配线路，动态选择报文通过的最佳路径，可以 平滑通信量。</li><li>提高线路可靠性，某条传输路径发生故障，可重新选 择另一条路径传输。</li><li>提高线路利用率，通信双方在不同的时间一段一段地 部分占有这条物理通道，多个报文可共享信道。</li><li>提供多目标服务：一个报文可同时发往多个目的地址。</li><li>在存储转发中容易实现代码转换和速率匹配，甚至收 发双方可以不同时处于可用状态。这样就便于类型、 规格和速度不同的计算机之间进行通信。</li></ol><p><strong>缺点</strong>：</p><ol><li>实时性差，不适合传送实时或交互式业务的数据。数 据进入交换结点后要经历存储转发过程，从而引起转 发时延。</li><li>只适用于数字信号。</li><li>由于报文长度没有限制，而每个中间结点都要完整地 接收传来的整个报文，当输出线路不空闲时，还可能 要存储几个完整报文等待转发，要求网络中每个结点 有较大的缓冲区。为了降低成本，减少结点的缓冲存 储器的容量，有时要把等待转发的报文存在磁盘上， 进一步增加了传送时延。</li></ol><h4 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h4><p>分组交换与报文交换的工作方式基本相同，都采用存储转发方式，形式上的主要差别在于，分组交换网 中要限制所传输的数据单位的长度，一般选128B。 发送节点首先对从终端设备送来的数据报文进行接收、 存储，而后将报文划分成一定长度的分组，并以分组为单位进行传输和交换。接收结点将收到的分组组 装成信息或报文。</p><p><strong>优点</strong>：</p><ol><li>无建立时延，无需为通信双方预先建立一条专用通信 线路，用户可随时发送分组。</li><li>线路利用率高，通信双方在不同的时间一段一段地部 分占有这条物理通道，多个分组可共享信道。</li><li>简化了存储管理。因为分组的长度固定，相应的缓冲 区的大小也固定，在交换结点中存储器的管理通常被 简化为对缓冲区的管理，相对比较容易。</li><li>加速传输，后一个分组的存储可以和前一个分组的转 发并行操作；传输一个分组比一份报文所需缓冲区小， 减少等待发送时间。</li><li>减少出错几率和重发数据量，提高可靠性，减少传输 时延。</li><li>分组短小，适用于计算机之间突发式数据通信。</li></ol><p><strong>缺点</strong>：</p><ol><li>尽管分组交换比报文交换的传输时延少，但仍存在存 储转发时延，而且其结点交换机必须具有更强的处理 能力。</li><li>每个分组都要加控制信息，一定程度上降低了通信效 率，增加了处理的时间。</li><li>当分组交换采用数据报服务时，可能出现失序、丢失 或重复分组，分组到达目的结点时，要对分组按编号 进行排序等工作，增加了麻烦。若采用虚电路服务， 虽无失序问题，但有呼叫建立、数据传输和虚电路释 放三个过程。</li></ol><h2 id="传输介质-amp-设备"><a href="#传输介质-amp-设备" class="headerlink" title="传输介质&amp;设备"></a>传输介质&amp;设备</h2><h3 id="传输介质"><a href="#传输介质" class="headerlink" title="传输介质"></a>传输介质</h3><p>传输介质也称传输媒体/传输媒介，它就是数据传输系统中在发送设备和接收设备之间的物理通路。</p><h4 id="导向传输介质"><a href="#导向传输介质" class="headerlink" title="导向传输介质"></a>导向传输介质</h4><p>电磁波被导向沿着固体媒介（铜线/光纤）传播。比如：双绞线、同轴电缆、光纤</p><h4 id="非导向传输介质"><a href="#非导向传输介质" class="headerlink" title="非导向传输介质"></a>非导向传输介质</h4><p>自由空间，介质可以是空气、真空、海水等。</p><h3 id="物理层设备"><a href="#物理层设备" class="headerlink" title="物理层设备"></a>物理层设备</h3><p>诞生原因：由于存在损耗，在线路上传输的信号功率会逐渐衰减，衰减到一定程度时将造成信号失真，因此会导致接 收错误</p><h4 id="中继器"><a href="#中继器" class="headerlink" title="中继器"></a>中继器</h4><p>功能： 对信号进行<strong>再生和还原</strong>，对衰减的信号进行放大，保持与原数据相同，以增加信号传输的距离，延长 网络的长度。</p><p>使用规则：<strong>5-4-3规则</strong> 网络标准中都对信号的延迟范围作了具体的规定，因而中继器只能在规定的范围内进行，否则会网络故障。</p><h4 id="集线器"><a href="#集线器" class="headerlink" title="集线器"></a>集线器</h4><p>功能： 对信号进行再生<strong>放大转发</strong>，对衰减的信号进行放大，接着转发到其他所有（除输入端口外）处于工作 状态的端口上，以增加信号传输的距离，延长网络的长度。不具备信号的定向传送能力，是一个共享式设备。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;计算机网络-第二章-物理层&quot;&gt;&lt;a href=&quot;#计算机网络-第二章-物理层&quot; class=&quot;headerlink&quot; title=&quot;计算机网络 第二章 物理层&quot;&gt;&lt;/a&gt;计算机网络 第二章 物理层&lt;/h1&gt;&lt;h2 id=&quot;通信基础&quot;&gt;&lt;a href=&quot;#通信基础&quot;</summary>
      
    
    
    
    
    <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="网络通讯" scheme="http://example.com/tags/%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF/"/>
    
    <category term="原理" scheme="http://example.com/tags/%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>wireshark简介及安装教程</title>
    <link href="http://example.com/2022/03/08/2022-3%E6%96%87%E7%AB%A0/wireshark%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <id>http://example.com/2022/03/08/2022-3%E6%96%87%E7%AB%A0/wireshark%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</id>
    <published>2022-03-07T16:00:00.000Z</published>
    <updated>2022-03-08T04:04:24.071Z</updated>
    
    <content type="html"><![CDATA[<h1 id="wireshark简介及安装教程"><a href="#wireshark简介及安装教程" class="headerlink" title="wireshark简介及安装教程"></a>wireshark简介及安装教程</h1><h2 id="1-简史"><a href="#1-简史" class="headerlink" title="1.简史"></a>1.简史</h2><ul><li>1997年末，Ethereal（Wireshark项目的最初名称）开始编写</li><li>2006年，Wireshark在一个新的项目中出现了：Wireshark。</li><li>2008年，经过十年的开发，Wireshark终于发布了1.0版本。这个版本是第一个被认为是完整的版本，其中最基本的功能被简化了。它的发布恰逢第一次Wireshark开发者和用户大会Sharkfest。</li><li>2015年发布了Wireshark 2.0，它采用了新的用户界面。</li></ul><h2 id="2-是什么"><a href="#2-是什么" class="headerlink" title="2.是什么"></a>2.是什么</h2><ul><li>wireshark是一种开源的免费的网络数据包分析器，能够尽可能的详细的呈现捕获的包数据</li><li>你可以把网络数据包分析器看作是一种测量设备，用来检测网络电缆内发生的事情，就像电工用伏特计来检查电缆内部的情况一样</li></ul><h2 id="3-使用场景"><a href="#3-使用场景" class="headerlink" title="3.使用场景"></a>3.使用场景</h2><ul><li>网络管理员会使用wireshark来检查网络问题</li><li>软件测试工程师使用wireshark抓包，来分析自己测试的软件</li><li>从事socket编程的工程师会用wireshark来调试</li><li>听说，华为，中兴的大部分工程师都会用到wireshark</li><li>总之跟网络相关的东西，都可能会用到wireshark</li></ul><h2 id="4-安装"><a href="#4-安装" class="headerlink" title="4.安装"></a>4.安装</h2><p>1.下载wireshark （下载后不建议安装在c盘）</p><p>（1）下载地址地址：<a href="https://www.wireshark.org/">https://www.wireshark.org/</a></p><p>（2）或者浏览器搜索wireshark 的官方主页</p><h4 id="2-下载Wireshark后，进行安装。"><a href="#2-下载Wireshark后，进行安装。" class="headerlink" title="2.下载Wireshark后，进行安装。"></a>2.下载Wireshark后，进行安装。</h4><h5 id="1-开始安装，直接点Next"><a href="#1-开始安装，直接点Next" class="headerlink" title="1.开始安装，直接点Next"></a>1.开始安装，直接点Next</h5><p><a href="https://imgtu.com/i/bcdyZT"><img src="https://s1.ax1x.com/2022/03/08/bcdyZT.jpg" alt="bcdyZT.jpg"></a></p><h5 id="2-不用说肯定是I-Agree，不点？安装不了。"><a href="#2-不用说肯定是I-Agree，不点？安装不了。" class="headerlink" title="2.不用说肯定是I Agree，不点？安装不了。"></a>2.不用说肯定是I Agree，不点？安装不了。</h5><p><a href="https://imgtu.com/i/bcdcoF"><img src="https://s1.ax1x.com/2022/03/08/bcdcoF.jpg" alt="bcdcoF.jpg"></a></p><h5 id="3-安装选项，这里默认就好了"><a href="#3-安装选项，这里默认就好了" class="headerlink" title="3.安装选项，这里默认就好了"></a>3.安装选项，这里默认就好了</h5><p><a href="https://imgtu.com/i/bcd4Q1"><img src="https://s1.ax1x.com/2022/03/08/bcd4Q1.jpg" alt="bcd4Q1.jpg"></a></p><!-- ![](https://s1.ax1x.com/2022/03/08/bcd4Q1.jpg) --><h5 id="4-附加任务，"><a href="#4-附加任务，" class="headerlink" title="4.附加任务，"></a>4.附加任务，</h5><p><a href="https://imgtu.com/i/bcdIL6"><img src="https://s1.ax1x.com/2022/03/08/bcdIL6.jpg" alt="bcdIL6.jpg"></a></p><h5 id="5-安装位置，强烈建议除C盘以外的盘，这里我就放在平时学习的软件里。"><a href="#5-安装位置，强烈建议除C盘以外的盘，这里我就放在平时学习的软件里。" class="headerlink" title="5.安装位置，强烈建议除C盘以外的盘，这里我就放在平时学习的软件里。"></a>5.安装位置，强烈建议除C盘以外的盘，这里我就放在平时学习的软件里。</h5><p><a href="https://imgtu.com/i/bcd7dO"><img src="https://s1.ax1x.com/2022/03/08/bcd7dO.jpg" alt="bcd7dO.jpg"></a></p><h5 id="6-这里需要注意一下，必须安装WinPcap，才能捕获数据包"><a href="#6-这里需要注意一下，必须安装WinPcap，才能捕获数据包" class="headerlink" title="6.这里需要注意一下，必须安装WinPcap，才能捕获数据包"></a>6.这里需要注意一下，必须安装WinPcap，才能捕获数据包</h5><p><a href="https://imgtu.com/i/bcw4hQ"><img src="https://s1.ax1x.com/2022/03/08/bcw4hQ.jpg" alt="bcw4hQ.jpg"></a></p><h5 id="7-USBPcap（-用Wireshark捕获USB数据，可以先不勾选、不进行安装，后续有需要可以再安装）"><a href="#7-USBPcap（-用Wireshark捕获USB数据，可以先不勾选、不进行安装，后续有需要可以再安装）" class="headerlink" title="7.USBPcap（ 用Wireshark捕获USB数据，可以先不勾选、不进行安装，后续有需要可以再安装）"></a>7.USBPcap（ 用Wireshark捕获USB数据，可以先不勾选、不进行安装，后续有需要可以再安装）</h5><p><a href="https://imgtu.com/i/bcwqBV"><img src="https://s1.ax1x.com/2022/03/08/bcwqBV.jpg" alt="bcwqBV.jpg"></a></p><h5 id="8-开始安装"><a href="#8-开始安装" class="headerlink" title="8.开始安装"></a>8.开始安装</h5><p><a href="https://imgtu.com/i/bcwbn0"><img src="https://s1.ax1x.com/2022/03/08/bcwbn0.jpg" alt="bcwbn0.jpg"></a></p><h5 id="9-安装WinPcap"><a href="#9-安装WinPcap" class="headerlink" title="9.安装WinPcap"></a>9.安装WinPcap</h5><p><a href="https://imgtu.com/i/bcwL7T"><img src="https://s1.ax1x.com/2022/03/08/bcwL7T.jpg" alt="bcwL7T.jpg"></a></p><h5 id="10-直接默认安装，不要取消打勾"><a href="#10-直接默认安装，不要取消打勾" class="headerlink" title="10.直接默认安装，不要取消打勾"></a>10.直接默认安装，不要取消打勾</h5><p><a href="https://imgtu.com/i/bcw7Xq"><img src="https://s1.ax1x.com/2022/03/08/bcw7Xq.jpg" alt="bcw7Xq.jpg"></a></p><h5 id="11-等待安装完后，点击Finish"><a href="#11-等待安装完后，点击Finish" class="headerlink" title="11.等待安装完后，点击Finish"></a>11.等待安装完后，点击Finish</h5><p><a href="https://imgtu.com/i/bcwTcn"><img src="https://s1.ax1x.com/2022/03/08/bcwTcn.jpg" alt="bcwTcn.jpg"></a><br><a href="https://imgtu.com/i/bcwXAU"><img src="https://s1.ax1x.com/2022/03/08/bcwXAU.jpg" alt="bcwXAU.jpg"></a></p><h5 id="12-这里注意一下："><a href="#12-这里注意一下：" class="headerlink" title="12.这里注意一下："></a>12.这里注意一下：</h5><p>Reboot now 是：现在重新启动电脑</p><p>I want to manually reboot later 是:我想以后手动重新启动，现不会重启电脑</p><p><a href="https://imgtu.com/i/bcwjNF"><img src="https://s1.ax1x.com/2022/03/08/bcwjNF.jpg" alt="bcwjNF.jpg"></a></p><p>安装完毕！</p><p>这时候可以在右下角搜索栏 wireshark 查看是否真正安装完毕！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;wireshark简介及安装教程&quot;&gt;&lt;a href=&quot;#wireshark简介及安装教程&quot; class=&quot;headerlink&quot; title=&quot;wireshark简介及安装教程&quot;&gt;&lt;/a&gt;wireshark简介及安装教程&lt;/h1&gt;&lt;h2 id=&quot;1-简史&quot;&gt;&lt;a </summary>
      
    
    
    
    
    <category term="wireshark" scheme="http://example.com/tags/wireshark/"/>
    
    <category term="安装教程" scheme="http://example.com/tags/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>对数器</title>
    <link href="http://example.com/2022/03/07/2022-3%E6%96%87%E7%AB%A0/%E5%AF%B9%E6%95%B0%E5%99%A8/"/>
    <id>http://example.com/2022/03/07/2022-3%E6%96%87%E7%AB%A0/%E5%AF%B9%E6%95%B0%E5%99%A8/</id>
    <published>2022-03-06T16:00:00.000Z</published>
    <updated>2022-03-07T07:21:07.862Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对数器"><a href="#对数器" class="headerlink" title="对数器"></a>对数器</h1><h2 id="1-为什么会有对数器？"><a href="#1-为什么会有对数器？" class="headerlink" title="1.为什么会有对数器？"></a>1.为什么会有对数器？</h2><p>在网络平台做题库时，比如 LeetCode、牛客网等，做题库提交代码，都会检测代码是否正确，正确则通关，否则失败。“检测代码” 底层原理就是对数器存在，没错！对数器就是随机生成大量的随机数据，用来跑代码，检测是否正确。而不是人为地输入一定 且 已知的数据来检测代码，这样的检测是没有说服力的。“检测代码” 也就是对数器的作用。</p><h2 id="2-对数器的概念"><a href="#2-对数器的概念" class="headerlink" title="2.对数器的概念"></a>2.对数器的概念</h2><p>1.你想要测试的方法a<br>2.实现复杂度不好但是容易实现的方法b<br>3.实现一个随机样本产生器<br>4.把方法a和方法b跑相同的随机样本，看看得到的结果是否一样<br>5.如果有一个随机样本使得对比结果不一致，打印样本进行人工干预，改对方法a和方法b<br>6.当样本数量很多时比对测试依然正确，可以确定方法a一定正确</p><h2 id="3-对数器的实现"><a href="#3-对数器的实现" class="headerlink" title="3.对数器的实现"></a>3.对数器的实现</h2><p>知道了对数器为什么有对数器之后，我们来看看应该怎么实现一个自己的对数器，以冒泡排序为例。来检测自己实现的冒泡排序算法是否正确！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSorted</span> &#123;</span><br><span class="line">    <span class="comment">// 自己实现的冒泡排序算法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span> arr[])</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> arr.length;</span><br><span class="line">​        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> N - <span class="number">1</span>; end &gt; <span class="number">0</span>; end--) &#123;</span><br><span class="line">​            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">second</span> <span class="operator">=</span> <span class="number">1</span>;second &lt;= end; second++) &#123;</span><br><span class="line">​                <span class="keyword">if</span> (arr[second - <span class="number">1</span>] &gt; arr[second]) &#123;</span><br><span class="line">​                    swap(arr, second - <span class="number">1</span>, second);</span><br><span class="line">​                &#125;</span><br><span class="line">​            &#125;</span><br><span class="line">​        &#125;</span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换两个值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[left];</span><br><span class="line">        arr[left] = arr[right];</span><br><span class="line">        arr[right] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 正确的排序方法(java类包自带)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">rightSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 随机生成的随机数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] generateRandomArray(<span class="type">int</span> maxSize, <span class="type">int</span> maxNum) &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[(<span class="type">int</span>) ((maxSize+<span class="number">1</span>) * Math.random())];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = (<span class="type">int</span>) (Math.random()*(maxNum+<span class="number">1</span>)) - (<span class="type">int</span>)(Math.random()*maxNum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 复制当前数组的一个样本(保证两个算法使用相同的样本)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] copyArray(<span class="type">int</span>[] arr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] newArray = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            newArray[i] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断两个数组是否完全相同</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEquals</span><span class="params">(<span class="type">int</span>[] arr1, <span class="type">int</span>[] arr2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr1.length != arr2.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (arr1 != <span class="literal">null</span> &amp;&amp; arr2 == <span class="literal">null</span> || arr1 == <span class="literal">null</span> &amp;&amp; arr2 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr1[i] != arr2[i]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (arr1 == <span class="literal">null</span> &amp;&amp; arr2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">testTims</span> <span class="operator">=</span> <span class="number">10000</span>; <span class="comment">//测试次数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxSize</span> <span class="operator">=</span> <span class="number">20</span>; <span class="comment">//最大测试容量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxNum</span> <span class="operator">=</span> <span class="number">20</span>; <span class="comment">//最大测试数据</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">euqals</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; testTims; i++) &#123;</span><br><span class="line">            <span class="type">int</span>[] arr1 = generateRandomArray(maxSize,maxNum); <span class="comment">// 随机生成数据</span></span><br><span class="line">            <span class="type">int</span>[] arr2 = copyArray(arr1); <span class="comment">// 复制样本</span></span><br><span class="line">            bubbleSort(arr1);<span class="comment">//用自己的算法排序</span></span><br><span class="line">            rightSort(arr2);<span class="comment">//用java.util.Arrays包的排序算法排序</span></span><br><span class="line">            <span class="comment">//比较是否相同</span></span><br><span class="line">            <span class="keyword">if</span> (!isEquals(arr1,arr2)) &#123;</span><br><span class="line">                euqals = <span class="literal">false</span>;<span class="comment">//一旦有不一样的值就设为false;</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(euqals ? <span class="string">&quot;Success!&quot;</span> : <span class="string">&quot;Error!&quot;</span> );</span><br><span class="line">        <span class="type">int</span>[] newArr = generateRandomArray(maxSize, maxNum);</span><br><span class="line">        printArray(newArr); <span class="comment">//没排序的数组打印出来</span></span><br><span class="line">        bubbleSort(newArr); <span class="comment">//排序后</span></span><br><span class="line">        printArray(newArr); <span class="comment">//再次打印，程序员自己看看有没有毛病</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;对数器&quot;&gt;&lt;a href=&quot;#对数器&quot; class=&quot;headerlink&quot; title=&quot;对数器&quot;&gt;&lt;/a&gt;对数器&lt;/h1&gt;&lt;h2 id=&quot;1-为什么会有对数器？&quot;&gt;&lt;a href=&quot;#1-为什么会有对数器？&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="对数器" scheme="http://example.com/tags/%E5%AF%B9%E6%95%B0%E5%99%A8/"/>
    
    <category term="检测代码" scheme="http://example.com/tags/%E6%A3%80%E6%B5%8B%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>双端链表</title>
    <link href="http://example.com/2022/03/06/2022-3%E6%96%87%E7%AB%A0/%E5%8F%8C%E7%AB%AF%E9%93%BE%E8%A1%A8/"/>
    <id>http://example.com/2022/03/06/2022-3%E6%96%87%E7%AB%A0/%E5%8F%8C%E7%AB%AF%E9%93%BE%E8%A1%A8/</id>
    <published>2022-03-05T16:00:00.000Z</published>
    <updated>2022-03-07T07:19:19.743Z</updated>
    
    <content type="html"><![CDATA[<h1 id="双端链表"><a href="#双端链表" class="headerlink" title="双端链表"></a>双端链表</h1><p>“双端链表” 顾名思义，就是在链表的两端 都可以增删减。</p><h2 id="1-双端链表思想："><a href="#1-双端链表思想：" class="headerlink" title="1.双端链表思想："></a>1.双端链表思想：</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>双端链表类叫做FirstLastList。它有两个项，first和last，一个指向链表中的第一个链结点，另一个指向最后一个链结点。如果链表中只有一个链结点，first和last就都指向它，如果没有链结点，两者都为null值。</p><h3 id="2-图解"><a href="#2-图解" class="headerlink" title="2.图解"></a>2.图解</h3><!-- ![](E:\MyProject\DemonBlog_hexo_github\blogphotos\文章内容插图\双端链表图解.jpg) --><p><a href="https://imgtu.com/i/brUIkn"><img src="https://s1.ax1x.com/2022/03/06/brUIkn.jpg" alt="brUIkn.jpg"></a></p><h3 id="3-优缺点"><a href="#3-优缺点" class="headerlink" title="3.优缺点"></a>3.优缺点</h3><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><p>动态利用内存空间，实现灵活的内存动态管理，由于内存不必连续，链表在插入的时候可以达到O(1)的复杂度。</p><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><p>每次添加结点时都需要2个指针，额外增加了内存空间消耗；查找一个节点或者访问特定编号的节点则需要O(n)的时间。</p><h2 id="2-双端链表代码实现："><a href="#2-双端链表代码实现：" class="headerlink" title="2.双端链表代码实现："></a>2.双端链表代码实现：</h2><h3 id="1-定义结点"><a href="#1-定义结点" class="headerlink" title="1.定义结点"></a>1.定义结点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;V&gt; &#123;</span><br><span class="line">   <span class="keyword">public</span> V value;  <span class="comment">// 结点的值</span></span><br><span class="line">   <span class="keyword">public</span> Node&lt;V&gt; last; <span class="comment">// 指针1</span></span><br><span class="line">   <span class="keyword">public</span> Node&lt;V&gt; frist; <span class="comment">// 指针2</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(V v)</span> &#123;</span><br><span class="line">      value = v;</span><br><span class="line">      last = <span class="literal">null</span>;</span><br><span class="line">      next = <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-初始化构造器"><a href="#2-初始化构造器" class="headerlink" title="2.初始化构造器"></a>2.初始化构造器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">MyDeque</span><span class="params">()</span> &#123;</span><br><span class="line">   head = <span class="literal">null</span>;</span><br><span class="line">   tail = <span class="literal">null</span>;</span><br><span class="line">   size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-判断是否为空"><a href="#3-判断是否为空" class="headerlink" title="3.判断是否为空"></a>3.判断是否为空</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="type">return</span> <span class="variable">size</span> <span class="operator">=</span>= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-当前链表的长度"><a href="#4-当前链表的长度" class="headerlink" title="4.当前链表的长度"></a>4.当前链表的长度</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-加入结点"><a href="#5-加入结点" class="headerlink" title="5.加入结点"></a>5.加入结点</h3><ol><li><h4 id="head-端加入（图解）"><a href="#head-端加入（图解）" class="headerlink" title="head 端加入（图解）"></a>head 端加入（图解）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在Head指针方向端加入元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pushHead</span><span class="params">(V value)</span> &#123;</span><br><span class="line">   Node&lt;V&gt; cur = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(value);</span><br><span class="line">   <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">      head = cur;</span><br><span class="line">      tail = cur;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      cur.frist = head;</span><br><span class="line">      head.last = cur;</span><br><span class="line">      head = cur;</span><br><span class="line">   &#125;</span><br><span class="line">   size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/brUzkR"><img src="https://s1.ax1x.com/2022/03/06/brUzkR.jpg" alt="brUzkR.jpg"></a></p></li><li><h4 id="tail-端加入"><a href="#tail-端加入" class="headerlink" title="tail 端加入"></a>tail 端加入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在Tail指针方向端加入元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pushTail</span><span class="params">(V value)</span> &#123;</span><br><span class="line">   Node&lt;V&gt; cur = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(value);</span><br><span class="line">   <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">      head = cur;</span><br><span class="line">      tail = cur;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      tail.frist = cur;</span><br><span class="line">      cur.last = tail;</span><br><span class="line">      tail = cur;</span><br><span class="line">   &#125;</span><br><span class="line">   size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="6-弹出结点"><a href="#6-弹出结点" class="headerlink" title="6.弹出结点"></a>6.弹出结点</h3><ol><li><h4 id="head-端弹出"><a href="#head-端弹出" class="headerlink" title="head 端弹出"></a>head 端弹出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在Head指针方向端弹出元素</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">pollHead</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="type">V</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">   <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> ans;</span><br><span class="line">   &#125;</span><br><span class="line">   size--;</span><br><span class="line">   ans = head.value;</span><br><span class="line">   <span class="keyword">if</span> (head == tail) &#123; <span class="comment">// 当符合条件时 即链表中只有一个元素 弹出后需要将 head tail 设置为空</span></span><br><span class="line">      head = <span class="literal">null</span>;</span><br><span class="line">      tail = <span class="literal">null</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      head = head.frist;</span><br><span class="line">      head.last = <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="tail-端弹出"><a href="#tail-端弹出" class="headerlink" title="tail 端弹出"></a>tail 端弹出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在Tail指针方向端弹出元素</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">pollTail</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="type">V</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">   <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> ans;</span><br><span class="line">   &#125;</span><br><span class="line">   size--;</span><br><span class="line">   ans = tail.value;</span><br><span class="line">   <span class="keyword">if</span> (head == tail) &#123; <span class="comment">// 当符合条件时 即链表中只有一个元素 弹出后需要将 head tail 设置为空</span></span><br><span class="line">      head = <span class="literal">null</span>;</span><br><span class="line">      tail = <span class="literal">null</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      tail = tail.last;</span><br><span class="line">      tail.frist = <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="7-查看结点"><a href="#7-查看结点" class="headerlink" title="7.查看结点"></a>7.查看结点</h3><ol><li><h4 id="head-端结点"><a href="#head-端结点" class="headerlink" title="head 端结点"></a>head 端结点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查看 head 元素</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">peekHead</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="type">V</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">   <span class="keyword">if</span> (head != <span class="literal">null</span>) &#123;</span><br><span class="line">      ans = head.value;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="tail-端结点"><a href="#tail-端结点" class="headerlink" title="tail 端结点"></a>tail 端结点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查看 tail 元素</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">peekTail</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="type">V</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">   <span class="keyword">if</span> (tail != <span class="literal">null</span>) &#123;</span><br><span class="line">      ans = tail.value;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="8-完整代码演示"><a href="#8-完整代码演示" class="headerlink" title="8.完整代码演示"></a>8.完整代码演示</h3>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// 定义结点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;V&gt; &#123;</span><br><span class="line">   <span class="keyword">public</span> V value;  <span class="comment">// 结点的值</span></span><br><span class="line">   <span class="keyword">public</span> Node&lt;V&gt; last; <span class="comment">// 指针1</span></span><br><span class="line">   <span class="keyword">public</span> Node&lt;V&gt; first; <span class="comment">// 指针2</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(V v)</span> &#123;</span><br><span class="line">      value = v;</span><br><span class="line">      last = <span class="literal">null</span>;</span><br><span class="line">      first = <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyDeque</span>&lt;V&gt; &#123;</span><br><span class="line">   <span class="keyword">private</span> Node&lt;V&gt; head;</span><br><span class="line">   <span class="keyword">private</span> Node&lt;V&gt; tail;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">MyDeque</span><span class="params">()</span> &#123;</span><br><span class="line">      head = <span class="literal">null</span>;</span><br><span class="line">      tail = <span class="literal">null</span>;</span><br><span class="line">      size = <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 判断链表是否为空</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">return</span> <span class="variable">size</span> <span class="operator">=</span>= <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 返回当前链表的长度</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> size;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 在Head指针方向端加入元素</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pushHead</span><span class="params">(V value)</span> &#123;</span><br><span class="line">      Node&lt;V&gt; cur = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(value);</span><br><span class="line">      <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">         head = cur;</span><br><span class="line">         tail = cur;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;   <span class="comment">// 第二张图解中的步骤</span></span><br><span class="line">         cur.first = head;</span><br><span class="line">         head.last = cur;</span><br><span class="line">         head = cur;</span><br><span class="line">      &#125;</span><br><span class="line">      size++;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 在Tail指针方向端加入元素</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pushTail</span><span class="params">(V value)</span> &#123;</span><br><span class="line">      Node&lt;V&gt; cur = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(value);</span><br><span class="line">      <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">         head = cur;</span><br><span class="line">         tail = cur;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         tail.first = cur;</span><br><span class="line">         cur.last = tail;</span><br><span class="line">         tail = cur;</span><br><span class="line">      &#125;</span><br><span class="line">      size++;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 在Head指针方向端弹出元素</span></span><br><span class="line">   <span class="keyword">public</span> V <span class="title function_">pollHead</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">V</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> ans;</span><br><span class="line">      &#125;</span><br><span class="line">      size--;</span><br><span class="line">      ans = head.value;</span><br><span class="line">      <span class="keyword">if</span> (head == tail) &#123; <span class="comment">// 当符合条件时 即链表中只有一个元素 弹出后需要将 head tail 设置为空</span></span><br><span class="line">         head = <span class="literal">null</span>;</span><br><span class="line">         tail = <span class="literal">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         head = head.first;</span><br><span class="line">         head.last = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> ans;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 在Tail指针方向端弹出元素</span></span><br><span class="line">   <span class="keyword">public</span> V <span class="title function_">pollTail</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">V</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> ans;</span><br><span class="line">      &#125;</span><br><span class="line">      size--;</span><br><span class="line">      ans = tail.value;</span><br><span class="line">      <span class="keyword">if</span> (head == tail) &#123; <span class="comment">// 当符合条件时 即链表中只有一个元素 弹出后需要将 head tail 设置为空</span></span><br><span class="line">         head = <span class="literal">null</span>;</span><br><span class="line">         tail = <span class="literal">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         tail = tail.last;</span><br><span class="line">         tail.first = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> ans;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 查看 head 元素</span></span><br><span class="line">   <span class="keyword">public</span> V <span class="title function_">peekHead</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">V</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">if</span> (head != <span class="literal">null</span>) &#123;</span><br><span class="line">         ans = head.value;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> ans;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 查看 tail 元素</span></span><br><span class="line">   <span class="keyword">public</span> V <span class="title function_">peekTail</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">V</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">if</span> (tail != <span class="literal">null</span>) &#123;</span><br><span class="line">         ans = tail.value;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> ans;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;双端链表&quot;&gt;&lt;a href=&quot;#双端链表&quot; class=&quot;headerlink&quot; title=&quot;双端链表&quot;&gt;&lt;/a&gt;双端链表&lt;/h1&gt;&lt;p&gt;“双端链表” 顾名思义，就是在链表的两端 都可以增删减。&lt;/p&gt;
&lt;h2 id=&quot;1-双端链表思想：&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    
    <category term="双端链表" scheme="http://example.com/tags/%E5%8F%8C%E7%AB%AF%E9%93%BE%E8%A1%A8/"/>
    
    <category term="链表" scheme="http://example.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫爬取豆瓣电影top25</title>
    <link href="http://example.com/2022/02/24/2022-3%E6%96%87%E7%AB%A0/Python%E7%88%AC%E8%99%AB%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1top25/"/>
    <id>http://example.com/2022/02/24/2022-3%E6%96%87%E7%AB%A0/Python%E7%88%AC%E8%99%AB%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1top25/</id>
    <published>2022-02-23T16:00:00.000Z</published>
    <updated>2022-03-08T13:19:18.903Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总体思路："><a href="#总体思路：" class="headerlink" title="总体思路："></a>总体思路：</h2><p><em>本文使用Pycharm演示</em></p><h3 id="1-拿到页面源代码"><a href="#1-拿到页面源代码" class="headerlink" title="1.拿到页面源代码"></a>1.拿到页面源代码</h3><h3 id="2-编写正则，提取页面数据"><a href="#2-编写正则，提取页面数据" class="headerlink" title="2.编写正则，提取页面数据"></a>2.编写正则，提取页面数据</h3><h3 id="3-保存数据"><a href="#3-保存数据" class="headerlink" title="3.保存数据"></a>3.保存数据</h3><p><em>科普一下：正则表达式 (以下只展示部分、是部分知识)</em></p><p>Regular Expression, 正则表达式, ⼀种使⽤表达式的⽅式对字符串进 ⾏匹配的语法规则。正则的优点: 速度快, 效率⾼, 准确性⾼ 正则的缺点: 新⼿上⼿难度有 点⼉⾼.正则的语法: 使⽤元字符进⾏排列组合⽤来匹配字符串 在线测试正则 表达式<a href="https://tool.oschina.net/regex/">https://tool.oschina.net/regex/</a><br>(1)元字符: 具有固定含义的特殊符号 常⽤元字符</p><p>1  .  匹配除换⾏符以外的任意字符, 未来在python的re模块 中是⼀个坑. </p><p>2  \w  匹配字⺟或数字或下划线 </p><p>3  \s  匹配任意的空⽩符</p><p>4  \d  匹配数字</p><p> 5  \n  匹配⼀个换⾏符</p><p> 6  \t  匹配⼀个制表符</p><p> 7  ^  匹配字符串的开始 </p><p>8  $  匹配字符串的结尾</p><p>(2)贪婪匹配和惰性匹配</p><p>1  .* 贪婪匹配, 尽可能多的去匹配结果 </p><p>2  .*? 惰性匹配, 尽可能少的去匹配结果 -&gt; 回溯</p><p>先看案例：</p><p>str: 玩⼉吃鸡游戏, 晚上⼀起上游戏, ⼲嘛呢? 打游戏啊</p><p>reg: 玩⼉.*?游戏</p><h2 id="任务开始"><a href="#任务开始" class="headerlink" title="任务开始"></a>任务开始</h2><p>先看需求：<br>⻚⾯源代码<br>url=“(<a href="https://movie.douban.com/top250?)%E2%80%9D">https://movie.douban.com/top250?)”</a></p><p>⽬标: 抓取”电影名称”,”上映年份”,”评分”,”评分⼈数”四项内容</p><p>⾸先, 先看⼀下⻚⾯源代码. 数据是否是直接怼在源代码上 的？用浏览器打开豆瓣url，鼠标右击，点“查看页面源代码”。很明显, 我们想要的数据全部都在⻚⾯源代码中体现了. 所以, 我们不需要考虑js动态加载数据的情况了. 那么接下来就是编写爬⾍代码的</p><h3 id="第⼀步-拿到⻚⾯源代码"><a href="#第⼀步-拿到⻚⾯源代码" class="headerlink" title="第⼀步. 拿到⻚⾯源代码"></a>第⼀步. 拿到⻚⾯源代码</h3><p>（requests没有导过的，自行百科，这里就不再赘余）<br>先导包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re</span><br></pre></td></tr></table></figure><p>处理一个小反爬机制，发送headers，模拟浏览器请求资源</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#模拟浏览器请求资源</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36 Edg/98.0.1108.56&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提示：<br>headers是在豆瓣网页，鼠标右击，点最下选项“检查” 或者谷歌浏览器快捷键F12。出来页面后点击上栏Network，刷新页面，点击Name栏下随意请求，此时点与Name栏同一水平线的Headers选项，拉到底端，就会看到 User-Agent 。注意！一定要复制完整！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#豆瓣网页源码</span><br><span class="line">url = “https://movie.douban.com/top250?”</span><br><span class="line"></span><br><span class="line">#resp存放爬取的内容</span><br><span class="line"></span><br><span class="line">resp = requests.get(url, headers=headers) print(resp.text)</span><br></pre></td></tr></table></figure><h3 id="第二步，编写正则，提取页面数据"><a href="#第二步，编写正则，提取页面数据" class="headerlink" title="第二步，编写正则，提取页面数据"></a>第二步，编写正则，提取页面数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开始写正则表达式 resp.S是去除html页面中的换行符</span></span><br><span class="line">obj = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;div class=&quot;item&quot;&gt;.*?&lt;span class=&quot;title&quot;&gt;(?P&lt;name&gt;.*?)&lt;/span&gt;.*?导演:(?P&lt;dao&gt;.*?)&amp;nbsp.*?&lt;br&gt;(?P&lt;year&gt;.*?)&amp;nbsp.*?&lt;span&gt;(?P&lt;number&gt;.*?)&lt;/span&gt;&#x27;</span>,re.S)</span><br></pre></td></tr></table></figure><h3 id="第三步，保存数据"><a href="#第三步，保存数据" class="headerlink" title="第三步，保存数据"></a>第三步，保存数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># //正则表达式提取信息</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;top250&quot;</span>, mode=<span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">result = obj.finditer(resp.text)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> result:</span><br><span class="line">    name = item.group(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">    dao = item.group(<span class="string">&quot;dao&quot;</span>)</span><br><span class="line">    year = item.group(<span class="string">&quot;year&quot;</span>).strip()</span><br><span class="line">    number = item.group(<span class="string">&quot;number&quot;</span>)</span><br><span class="line">    f.write(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>,<span class="subst">&#123;dao&#125;</span>,<span class="subst">&#123;year&#125;</span>,<span class="subst">&#123;number&#125;</span>\n&quot;</span>)</span><br><span class="line"><span class="comment">#关闭流</span></span><br><span class="line">f.close()</span><br><span class="line">resp.close()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;top250提取完毕！&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>总代码演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re  <span class="comment">#导入正则表达式包</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理一个小反爬 模拟浏览器发送</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.68 (KHTML, like Gecko) Chrome/98.0.4958.102 Safari/547.36 Edg/98.0.1106.56&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要爬取的网页</span></span><br><span class="line">url = <span class="string">&quot;https://movie.douban.com/top250?&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># resp存放爬取内容</span></span><br><span class="line">resp = requests.get(url, headers=headers)</span><br><span class="line"><span class="comment"># print(resp.text)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编写文件存放数据</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;top25&quot;</span>, mode=<span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="comment">#开始写正则表达式 resp.S是去除html页面中的换行符</span></span><br><span class="line">obj = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;div class=&quot;item&quot;&gt;.*?&lt;span class=&quot;title&quot;&gt;(?P&lt;name&gt;.*?)&lt;/span&gt;.*?导演:(?P&lt;dao&gt;.*?)&amp;nbsp.*?&lt;br&gt;(?P&lt;year&gt;.*?)&amp;nbsp.*?&lt;span&gt;(?P&lt;number&gt;.*?)&lt;/span&gt;&#x27;</span>,re.S)</span><br><span class="line"></span><br><span class="line"><span class="comment"># //正则表达式提取信息</span></span><br><span class="line">result = obj.finditer(resp.text)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> result:</span><br><span class="line">    name = item.group(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">    dao = item.group(<span class="string">&quot;dao&quot;</span>)</span><br><span class="line">    year = item.group(<span class="string">&quot;year&quot;</span>).strip()</span><br><span class="line">    number = item.group(<span class="string">&quot;number&quot;</span>)</span><br><span class="line">    f.write(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>,<span class="subst">&#123;dao&#125;</span>,<span class="subst">&#123;year&#125;</span>,<span class="subst">&#123;number&#125;</span>\n&quot;</span>)</span><br><span class="line">f.close()</span><br><span class="line">resp.close()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;top250提取完毕！&quot;</span>)</span><br></pre></td></tr></table></figure><p>此时就会看到左边栏生成名为top25文件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;总体思路：&quot;&gt;&lt;a href=&quot;#总体思路：&quot; class=&quot;headerlink&quot; title=&quot;总体思路：&quot;&gt;&lt;/a&gt;总体思路：&lt;/h2&gt;&lt;p&gt;&lt;em&gt;本文使用Pycharm演示&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-拿到页面源代码&quot;&gt;&lt;a href=&quot;#1-</summary>
      
    
    
    
    
    <category term="Python爬虫" scheme="http://example.com/tags/Python%E7%88%AC%E8%99%AB/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>线性表的顺序存储</title>
    <link href="http://example.com/2022/02/23/2022-3%E6%96%87%E7%AB%A0/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/"/>
    <id>http://example.com/2022/02/23/2022-3%E6%96%87%E7%AB%A0/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/</id>
    <published>2022-02-22T16:00:00.000Z</published>
    <updated>2022-03-06T08:58:39.062Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线性表的顺序存储"><a href="#线性表的顺序存储" class="headerlink" title="线性表的顺序存储"></a>线性表的顺序存储</h2><h2 id="1存储结构"><a href="#1存储结构" class="headerlink" title="1存储结构"></a>1存储结构</h2><p>线性表的顺序存储指使用连续的存储空间，按照数据元素在线性表中的序号依次存储数据元素。</p><p>线性表的顺序表示定义如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">seqList</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> maxLength;</span><br><span class="line"></span><br><span class="line">ElemType *element;</span><br><span class="line"></span><br><span class="line">&#125; SeqList;</span><br></pre></td></tr></table></figure><h2 id="2-1初始化"><a href="#2-1初始化" class="headerlink" title="2.1初始化"></a>2.1初始化</h2><p>（1）为顺序表L动态分配一维数组</p><p>（2）若动态分配一维数组失败，则返回ERROR；否则返回OK。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">Init</span><span class="params">(SeqList *L, <span class="type">int</span> mSize)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  L-&gt;maxLength = mSize;</span><br><span class="line"></span><br><span class="line">  L-&gt;n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  L-&gt;element = (ElemType *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ElemType) * mSize);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!L-&gt;element)</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> ERROR;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2查找"><a href="#2-2查找" class="headerlink" title="2.2查找"></a>2.2查找</h2><p>（1）判断所找的数组下标i是否越界，若越界则返回ERROR。</p><p>（2）若数组下标i未越界，则取出element【i】的值通过参数x返回。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">Find</span><span class="params">(SeqList *L, <span class="type">int</span> i, ElemType *x)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt; L-&gt;n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> ERROR;</span><br><span class="line"></span><br><span class="line">  *x = L-&gt;element[i];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3插入"><a href="#2-3插入" class="headerlink" title="2.3插入"></a>2.3插入</h2><p>（1）判断所找的数组下标i是否越界，若越界则返回ERROR。</p><p>（2）判断顺序表的存储空间是否已满，若已满，则返回ERROR。</p><p>（3）将元素（ai+1，……,an-1)依次向后移动一位。</p><p>（4）将新的元素x放在下标为i+1的位置。</p><p>（5）表长加1。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">Insert</span><span class="params">(SeqList *L, <span class="type">int</span> i, ElemType x)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (i &lt; <span class="number">-1</span> || i &gt; L-&gt;n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> ERROR;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (L-&gt;n == L-&gt;maxLength)</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> ERROR;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> j;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (j = L-&gt;n - <span class="number">1</span>; j &gt; i; j--)</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">​    L-&gt;element[j + <span class="number">1</span>] = L-&gt;element[j];</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  L-&gt;element[i + <span class="number">1</span>] = x;</span><br><span class="line"></span><br><span class="line">  L-&gt;n++;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4删除"><a href="#2-4删除" class="headerlink" title="2.4删除"></a>2.4删除</h2><p>（1）判断所找的数组下标i是否越界，若越界则返回ERROR。</p><p>（2）判断顺序表的存储空间是否为空，若为空，则返回ERROR。</p><p>（3）将元素（ai+1，……,an-1)依次向前移动一位。</p><p>（4）表长减1。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">Delete</span><span class="params">(SeqList *L, <span class="type">int</span> i)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt; L-&gt;n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> ERROR;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!L-&gt;n)</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> ERROR;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> j;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; L-&gt;n; j++)</span><br><span class="line"></span><br><span class="line">​    L-&gt;element[j] = L-&gt;element[j + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  L-&gt;n--;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5输出"><a href="#2-5输出" class="headerlink" title="2.5输出"></a>2.5输出</h2><p>（2）判断顺序表是否为空，若为空，则返回ERROR。</p><p>（3）将元素（ai+1，……,an-1)依次输出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">Output</span><span class="params">(SeqList *L)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!L-&gt;n)</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> ERROR;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; L-&gt;n - <span class="number">1</span>; i++)</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, L-&gt;element[i]);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6撤销"><a href="#2-6撤销" class="headerlink" title="2.6撤销"></a>2.6撤销</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Destroy</span><span class="params">(SeqList *L)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  L-&gt;n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  L-&gt;maxLength = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(L-&gt;element);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-7主函数main"><a href="#2-7主函数main" class="headerlink" title="2.7主函数main"></a>2.7主函数main</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">  SeqList <span class="built_in">list</span>;  <span class="comment">//创建顺序表</span></span><br><span class="line"></span><br><span class="line">  Init(&amp;<span class="built_in">list</span>, <span class="number">10</span>); <span class="comment">//初始化存储空间为10的顺序表</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line"></span><br><span class="line">​    Insert(&amp;<span class="built_in">list</span>, i - <span class="number">1</span>, i + <span class="number">10</span>);    <span class="comment">//for循环依次插入</span></span><br><span class="line"></span><br><span class="line">  Output(&amp;<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line">  Delete(&amp;<span class="built_in">list</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">  Output(&amp;<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line">  Destroy(&amp;<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10  11  12  13  14  15  16  17  18      </span><br><span class="line">10  11  12  13  14  15  17  18 </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;线性表的顺序存储&quot;&gt;&lt;a href=&quot;#线性表的顺序存储&quot; class=&quot;headerlink&quot; title=&quot;线性表的顺序存储&quot;&gt;&lt;/a&gt;线性表的顺序存储&lt;/h2&gt;&lt;h2 id=&quot;1存储结构&quot;&gt;&lt;a href=&quot;#1存储结构&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="顺序表" scheme="http://example.com/tags/%E9%A1%BA%E5%BA%8F%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>堆栈</title>
    <link href="http://example.com/2022/02/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <id>http://example.com/2022/02/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</id>
    <published>2022-02-21T16:24:27.000Z</published>
    <updated>2022-03-03T13:14:18.786Z</updated>
    
    <content type="html"><![CDATA[<h2 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h2><h3 id="1-1堆栈ADT"><a href="#1-1堆栈ADT" class="headerlink" title="1.1堆栈ADT"></a>1.1堆栈ADT</h3><p><strong>数据：</strong></p><p>​    n个数据的线性序列（a0，a1,……,an-1),其中线性序列的长度上限为maxSize，且0&lt;=n&lt;maxSize。</p><p><strong>运算：</strong></p><p>​    Create（S，maxSize）：建立一个最多能存储maxSize个元素的空堆栈S。</p><p>​    Destroy（S）：释放堆栈所占的存储空间。</p><p>​    IsEmpty（S）：若堆栈为空，则返回TRUE，否则返回FALSE。</p><p>​    IsFull（S）：若堆栈已满，则返回TRUE，否则返回FALSE。</p><p>​    Top（S，X）；获取堆栈S的栈顶元素，通过X返回，若获取成功，则返回TRUE，否则返回FALSE。</p><p>​    Pop（S）: 从堆栈中删除栈顶元素，若删除成功，则返回TRUE，否则返回FALSE。</p><p>​    Clear（S）：清除堆栈S中的全部元素。</p><h3 id="1-2堆栈的顺序表示"><a href="#1-2堆栈的顺序表示" class="headerlink" title="1.2堆栈的顺序表示"></a>1.2堆栈的顺序表示</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BOOL int  ***自定义BOOL为int型***</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TRUE 1;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FALSE 0;</span></span><br></pre></td></tr></table></figure><p><em><strong>自定义BOOL为int型</strong></em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;</span><br></pre></td></tr></table></figure><p><strong>堆栈结构体定义</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">stack</span>&#123;</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> top;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> maxSize;</span><br><span class="line"></span><br><span class="line">  ElemType *element;</span><br><span class="line"></span><br><span class="line">&#125;Stack;</span><br></pre></td></tr></table></figure><p><strong>建立一个最多能存储maxSize个元素的空堆栈S</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Create</span><span class="params">(Stack *S, <span class="type">int</span> mSize)</span>&#123;</span><br><span class="line"></span><br><span class="line">  S-&gt;maxSize=mSize;</span><br><span class="line"></span><br><span class="line">  S-&gt;element=(ElemType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ElemType)*mSize);</span><br><span class="line"></span><br><span class="line">  S-&gt;top=<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>释放堆栈所占的存储空间</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Destroy</span><span class="params">(Stack *S)</span>&#123;</span><br><span class="line"></span><br><span class="line">  S-&gt;maxSize=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(S-&gt;element);</span><br><span class="line"></span><br><span class="line">  S-&gt;top=<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>若堆栈为空，则返回TRUE，否则返回FALSE</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">IsEmtpy</span><span class="params">(Stack *S)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> S-&gt;top==<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>若堆栈已满，则返回TRUE，否则返回FALSE</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">IsFull</span><span class="params">(Stack *S)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> S-&gt;top==S-&gt;maxSize<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>获取堆栈S的栈顶元素，通过X返回，若获取成功，则返回TRUE，否则返回FALSE</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">Top</span><span class="params">(Stack *S,ElemType *X)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(IsEmtpy(S))</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">  *X=S-&gt;element[S-&gt;top];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> TRUE;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在栈顶位置插入元素X，若插入成功，则返回TRUE，否则返回FALSE</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">Push</span><span class="params">(Stack *S,ElemType X)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(IsFull(S))</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">  S-&gt;top++;</span><br><span class="line"></span><br><span class="line">  S-&gt;element[S-&gt;top]=X;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> TRUE;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>从堆栈中删除栈顶元素，若删除成功，则返回TRUE，否则返回FALSE</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">Pop</span><span class="params">(Stack *S)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(IsEmtpy(S))</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">  S-&gt;top--;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> TRUE;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>清除堆栈S中的全部元素</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Clear</span><span class="params">(Stack *S)</span>&#123;</span><br><span class="line"></span><br><span class="line">  S-&gt;top=<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>主函数测试</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">  Stack S;</span><br><span class="line"></span><br><span class="line">  Create(&amp;S, <span class="number">10</span>);<span class="comment">//创建一个大小为10的堆栈</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">​    Push(&amp;S, i + <span class="number">100</span>);`<span class="comment">//依次赋值100~109</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> number;<span class="comment">//接受栈顶的数据</span></span><br><span class="line"></span><br><span class="line">  Top(&amp;S, &amp;number);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;栈顶的数据为：%d &quot;</span>, number);</span><br><span class="line"></span><br><span class="line">  Destroy(&amp;S);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试结果：</strong></p><p>​    栈顶的数据为：<strong>109</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;堆栈&quot;&gt;&lt;a href=&quot;#堆栈&quot; class=&quot;headerlink&quot; title=&quot;堆栈&quot;&gt;&lt;/a&gt;堆栈&lt;/h2&gt;&lt;h3 id=&quot;1-1堆栈ADT&quot;&gt;&lt;a href=&quot;#1-1堆栈ADT&quot; class=&quot;headerlink&quot; title=&quot;1.1堆栈ADT&quot;</summary>
      
    
    
    
    
    <category term="堆栈" scheme="http://example.com/tags/%E5%A0%86%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/02/17/hello-world/"/>
    <id>http://example.com/2022/02/17/hello-world/</id>
    <published>2022-02-17T05:43:05.685Z</published>
    <updated>2022-02-24T06:36:38.786Z</updated>
    
    <content type="html"><![CDATA[<!-- ## Quick Start### Create a new post<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a> –&gt;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;!-- 
## Quick Start

### Create a new post

&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;b</summary>
      
    
    
    
    
  </entry>
  
</feed>
