<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Demon_Blog</title>
  <icon>https://www.gravatar.com/avatar/46b1ed1d11314994abe34ef4eaed312b</icon>
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-02-24T07:21:48.749Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Demon_qw</name>
    <email>wqw923573@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python爬虫爬取豆瓣电影top25</title>
    <link href="http://example.com/2022/02/24/2022-3%E6%96%87%E7%AB%A0/Python%E7%88%AC%E8%99%AB%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1top25/"/>
    <id>http://example.com/2022/02/24/2022-3%E6%96%87%E7%AB%A0/Python%E7%88%AC%E8%99%AB%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1top25/</id>
    <published>2022-02-23T16:00:00.000Z</published>
    <updated>2022-02-24T07:21:48.749Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总体思路："><a href="#总体思路：" class="headerlink" title="总体思路："></a>总体思路：</h2><p><em>本文使用Pycharm演示</em></p><h3 id="1-拿到页面源代码"><a href="#1-拿到页面源代码" class="headerlink" title="1.拿到页面源代码"></a>1.拿到页面源代码</h3><h3 id="2-编写正则，提取页面数据"><a href="#2-编写正则，提取页面数据" class="headerlink" title="2.编写正则，提取页面数据"></a>2.编写正则，提取页面数据</h3><h3 id="3-保存数据"><a href="#3-保存数据" class="headerlink" title="3.保存数据"></a>3.保存数据</h3><p><em>科普一下：正则表达式 (以下只展示部分、是部分知识)</em></p><p>Regular Expression, 正则表达式, ⼀种使⽤表达式的⽅式对字符串进 ⾏匹配的语法规则。正则的优点: 速度快, 效率⾼, 准确性⾼ 正则的缺点: 新⼿上⼿难度有 点⼉⾼.正则的语法: 使⽤元字符进⾏排列组合⽤来匹配字符串 在线测试正则 表达式<a href="https://tool.oschina.net/regex/">https://tool.oschina.net/regex/</a><br>(1)元字符: 具有固定含义的特殊符号 常⽤元字符</p><p>1  .  匹配除换⾏符以外的任意字符, 未来在python的re模块 中是⼀个坑. </p><p>2  \w  匹配字⺟或数字或下划线 </p><p>3  \s  匹配任意的空⽩符</p><p>4  \d  匹配数字</p><p> 5  \n  匹配⼀个换⾏符</p><p> 6  \t  匹配⼀个制表符</p><p> 7  ^  匹配字符串的开始 </p><p>8  $  匹配字符串的结尾</p><p>(2)贪婪匹配和惰性匹配</p><p>1  .* 贪婪匹配, 尽可能多的去匹配结果 </p><p>2  .*? 惰性匹配, 尽可能少的去匹配结果 -&gt; 回溯</p><p>先看案例：</p><p>str: 玩⼉吃鸡游戏, 晚上⼀起上游戏, ⼲嘛呢? 打游戏啊</p><p>reg: 玩⼉.*?游戏</p><h2 id="任务开始"><a href="#任务开始" class="headerlink" title="任务开始"></a>任务开始</h2><p>先看需求：<br>⻚⾯源代码<br>url=“(<a href="https://movie.douban.com/top250?)%E2%80%9D">https://movie.douban.com/top250?)”</a></p><p>⽬标: 抓取”电影名称”,”上映年份”,”评分”,”评分⼈数”四项内容</p><p>⾸先, 先看⼀下⻚⾯源代码. 数据是否是直接怼在源代码上 的？用浏览器打开豆瓣url，鼠标右击，点“查看页面源代码”。很明显, 我们想要的数据全部都在⻚⾯源代码中体现了. 所以, 我们不需要考虑js动态加载数据的情况了. 那么接下来就是编写爬⾍代码的</p><h3 id="第⼀步-拿到⻚⾯源代码"><a href="#第⼀步-拿到⻚⾯源代码" class="headerlink" title="第⼀步. 拿到⻚⾯源代码"></a>第⼀步. 拿到⻚⾯源代码</h3><p>（requests没有导过的，自行百科，这里就不再赘余）<br>先导包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re</span><br></pre></td></tr></table></figure><p>处理一个小反爬机制，发送headers，模拟浏览器请求资源</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#模拟浏览器请求资源</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36 Edg/98.0.1108.56&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提示：<br>headers是在豆瓣网页，鼠标右击，点最下选项“检查” 或者谷歌浏览器快捷键F12。出来页面后点击上栏Network，刷新页面，点击Name栏下随意请求，此时点与Name栏同一水平线的Headers选项，拉到底端，就会看到 User-Agent 。注意！一定要复制完整！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#豆瓣网页源码</span><br><span class="line">url = “https://movie.douban.com/top250?”</span><br><span class="line"></span><br><span class="line">#resp存放爬取的内容</span><br><span class="line"></span><br><span class="line">resp = requests.get(url, headers=headers) print(resp.text)</span><br></pre></td></tr></table></figure><h3 id="第二步，编写正则，提取页面数据"><a href="#第二步，编写正则，提取页面数据" class="headerlink" title="第二步，编写正则，提取页面数据"></a>第二步，编写正则，提取页面数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开始写正则表达式 resp.S是去除html页面中的换行符</span></span><br><span class="line">obj = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;div class=&quot;item&quot;&gt;.*?&lt;span class=&quot;title&quot;&gt;(?P&lt;name&gt;.*?)&lt;/span&gt;.*?导演:(?P&lt;dao&gt;.*?)&amp;nbsp.*?&lt;br&gt;(?P&lt;year&gt;.*?)&amp;nbsp.*?&lt;span&gt;(?P&lt;number&gt;.*?)&lt;/span&gt;&#x27;</span>,re.S)</span><br></pre></td></tr></table></figure><h3 id="第三步，保存数据"><a href="#第三步，保存数据" class="headerlink" title="第三步，保存数据"></a>第三步，保存数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># //正则表达式提取信息</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;top250&quot;</span>, mode=<span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">result = obj.finditer(resp.text)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> result:</span><br><span class="line">    name = item.group(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">    dao = item.group(<span class="string">&quot;dao&quot;</span>)</span><br><span class="line">    year = item.group(<span class="string">&quot;year&quot;</span>).strip()</span><br><span class="line">    number = item.group(<span class="string">&quot;number&quot;</span>)</span><br><span class="line">    f.write(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>,<span class="subst">&#123;dao&#125;</span>,<span class="subst">&#123;year&#125;</span>,<span class="subst">&#123;number&#125;</span>\n&quot;</span>)</span><br><span class="line"><span class="comment">#关闭流</span></span><br><span class="line">f.close()</span><br><span class="line">resp.close()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;top250提取完毕！&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>总代码演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re  <span class="comment">#导入正则表达式包</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理一个小反爬 模拟浏览器发送</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.68 (KHTML, like Gecko) Chrome/98.0.4958.102 Safari/547.36 Edg/98.0.1106.56&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要爬取的网页</span></span><br><span class="line">url = <span class="string">&quot;https://movie.douban.com/top250?&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># resp存放爬取内容</span></span><br><span class="line">resp = requests.get(url, headers=headers)</span><br><span class="line"><span class="comment"># print(resp.text)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编写文件存放数据</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;top25&quot;</span>, mode=<span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="comment">#开始写正则表达式 resp.S是去除html页面中的换行符</span></span><br><span class="line">obj = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;div class=&quot;item&quot;&gt;.*?&lt;span class=&quot;title&quot;&gt;(?P&lt;name&gt;.*?)&lt;/span&gt;.*?导演:(?P&lt;dao&gt;.*?)&amp;nbsp.*?&lt;br&gt;(?P&lt;year&gt;.*?)&amp;nbsp.*?&lt;span&gt;(?P&lt;number&gt;.*?)&lt;/span&gt;&#x27;</span>,re.S)</span><br><span class="line"></span><br><span class="line"><span class="comment"># //正则表达式提取信息</span></span><br><span class="line">result = obj.finditer(resp.text)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> result:</span><br><span class="line">    name = item.group(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">    dao = item.group(<span class="string">&quot;dao&quot;</span>)</span><br><span class="line">    year = item.group(<span class="string">&quot;year&quot;</span>).strip()</span><br><span class="line">    number = item.group(<span class="string">&quot;number&quot;</span>)</span><br><span class="line">    f.write(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>,<span class="subst">&#123;dao&#125;</span>,<span class="subst">&#123;year&#125;</span>,<span class="subst">&#123;number&#125;</span>\n&quot;</span>)</span><br><span class="line">f.close()</span><br><span class="line">resp.close()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;top250提取完毕！&quot;</span>)</span><br></pre></td></tr></table></figure><p>此时就会看到左边栏生成名为top25文件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;总体思路：&quot;&gt;&lt;a href=&quot;#总体思路：&quot; class=&quot;headerlink&quot; title=&quot;总体思路：&quot;&gt;&lt;/a&gt;总体思路：&lt;/h2&gt;&lt;p&gt;&lt;em&gt;本文使用Pycharm演示&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-拿到页面源代码&quot;&gt;&lt;a href=&quot;#1-</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>线性表的顺序存储</title>
    <link href="http://example.com/2022/02/23/2022-3%E6%96%87%E7%AB%A0/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/"/>
    <id>http://example.com/2022/02/23/2022-3%E6%96%87%E7%AB%A0/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/</id>
    <published>2022-02-22T16:00:00.000Z</published>
    <updated>2022-02-23T09:24:57.072Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线性表的顺序存储"><a href="#线性表的顺序存储" class="headerlink" title="线性表的顺序存储"></a>线性表的顺序存储</h2><h2 id="1存储结构"><a href="#1存储结构" class="headerlink" title="1存储结构"></a>1存储结构</h2><p>线性表的顺序存储指使用连续的存储空间，按照数据元素在线性表中的序号依次存储数据元素。</p><p>线性表的顺序表示定义如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">seqList</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> maxLength;</span><br><span class="line"></span><br><span class="line">ElemType *element;</span><br><span class="line"></span><br><span class="line">&#125; SeqList;</span><br></pre></td></tr></table></figure><h2 id="2-1初始化"><a href="#2-1初始化" class="headerlink" title="2.1初始化"></a>2.1初始化</h2><p>（1）为顺序表L动态分配一维数组</p><p>（2）若动态分配一维数组失败，则返回ERROR；否则返回OK。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">Init</span><span class="params">(SeqList *L, <span class="type">int</span> mSize)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  L-&gt;maxLength = mSize;</span><br><span class="line"></span><br><span class="line">  L-&gt;n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  L-&gt;element = (ElemType *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ElemType) * mSize);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!L-&gt;element)</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> ERROR;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2查找"><a href="#2-2查找" class="headerlink" title="2.2查找"></a>2.2查找</h2><p>（1）判断所找的数组下标i是否越界，若越界则返回ERROR。</p><p>（2）若数组下标i未越界，则取出element【i】的值通过参数x返回。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">Find</span><span class="params">(SeqList *L, <span class="type">int</span> i, ElemType *x)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt; L-&gt;n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> ERROR;</span><br><span class="line"></span><br><span class="line">  *x = L-&gt;element[i];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3插入"><a href="#2-3插入" class="headerlink" title="2.3插入"></a>2.3插入</h2><p>（1）判断所找的数组下标i是否越界，若越界则返回ERROR。</p><p>（2）判断顺序表的存储空间是否已满，若已满，则返回ERROR。</p><p>（3）将元素（ai+1，……,an-1)依次向后移动一位。</p><p>（4）将新的元素x放在下标为i+1的位置。</p><p>（5）表长加1。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">Insert</span><span class="params">(SeqList *L, <span class="type">int</span> i, ElemType x)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (i &lt; <span class="number">-1</span> || i &gt; L-&gt;n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> ERROR;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (L-&gt;n == L-&gt;maxLength)</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> ERROR;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> j;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (j = L-&gt;n - <span class="number">1</span>; j &gt; i; j--)</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">​    L-&gt;element[j + <span class="number">1</span>] = L-&gt;element[j];</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  L-&gt;element[i + <span class="number">1</span>] = x;</span><br><span class="line"></span><br><span class="line">  L-&gt;n++;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4删除"><a href="#2-4删除" class="headerlink" title="2.4删除"></a>2.4删除</h2><p>（1）判断所找的数组下标i是否越界，若越界则返回ERROR。</p><p>（2）判断顺序表的存储空间是否为空，若为空，则返回ERROR。</p><p>（3）将元素（ai+1，……,an-1)依次向前移动一位。</p><p>（4）表长减1。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">Delete</span><span class="params">(SeqList *L, <span class="type">int</span> i)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt; L-&gt;n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> ERROR;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!L-&gt;n)</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> ERROR;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> j;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; L-&gt;n; j++)</span><br><span class="line"></span><br><span class="line">​    L-&gt;element[j] = L-&gt;element[j + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  L-&gt;n--;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5输出"><a href="#2-5输出" class="headerlink" title="2.5输出"></a>2.5输出</h2><p>（2）判断顺序表是否为空，若为空，则返回ERROR。</p><p>（3）将元素（ai+1，……,an-1)依次输出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">Output</span><span class="params">(SeqList *L)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!L-&gt;n)</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> ERROR;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; L-&gt;n - <span class="number">1</span>; i++)</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, L-&gt;element[i]);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6撤销"><a href="#2-6撤销" class="headerlink" title="2.6撤销"></a>2.6撤销</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Destroy</span><span class="params">(SeqList *L)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  L-&gt;n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  L-&gt;maxLength = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(L-&gt;element);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-7主函数main"><a href="#2-7主函数main" class="headerlink" title="2.7主函数main"></a>2.7主函数main</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">  SeqList <span class="built_in">list</span>;  <span class="comment">//创建顺序表</span></span><br><span class="line"></span><br><span class="line">  Init(&amp;<span class="built_in">list</span>, <span class="number">10</span>); <span class="comment">//初始化存储空间为10的顺序表</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line"></span><br><span class="line">​    Insert(&amp;<span class="built_in">list</span>, i - <span class="number">1</span>, i + <span class="number">10</span>);    <span class="comment">//for循环依次插入</span></span><br><span class="line"></span><br><span class="line">  Output(&amp;<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line">  Delete(&amp;<span class="built_in">list</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">  Output(&amp;<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line">  Destroy(&amp;<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10  11  12  13  14  15  16  17  18      </span><br><span class="line">10  11  12  13  14  15  17  18 </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;线性表的顺序存储&quot;&gt;&lt;a href=&quot;#线性表的顺序存储&quot; class=&quot;headerlink&quot; title=&quot;线性表的顺序存储&quot;&gt;&lt;/a&gt;线性表的顺序存储&lt;/h2&gt;&lt;h2 id=&quot;1存储结构&quot;&gt;&lt;a href=&quot;#1存储结构&quot; class=&quot;headerlink</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>堆栈</title>
    <link href="http://example.com/2022/02/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <id>http://example.com/2022/02/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</id>
    <published>2022-02-21T16:24:27.000Z</published>
    <updated>2022-02-23T09:12:54.565Z</updated>
    
    <content type="html"><![CDATA[<h2 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h2><h3 id="1-1堆栈ADT"><a href="#1-1堆栈ADT" class="headerlink" title="1.1堆栈ADT"></a>1.1堆栈ADT</h3><p><strong>数据：</strong></p><p>​    n个数据的线性序列（a0，a1,……,an-1),其中线性序列的长度上限为maxSize，且0&lt;=n&lt;maxSize。</p><p><strong>运算：</strong></p><p>​    Create（S，maxSize）：建立一个最多能存储maxSize个元素的空堆栈S。</p><p>​    Destroy（S）：释放堆栈所占的存储空间。</p><p>​    IsEmpty（S）：若堆栈为空，则返回TRUE，否则返回FALSE。</p><p>​    IsFull（S）：若堆栈已满，则返回TRUE，否则返回FALSE。</p><p>​    Top（S，X）；获取堆栈S的栈顶元素，通过X返回，若获取成功，则返回TRUE，否则返回FALSE。</p><p>​    Pop（S）: 从堆栈中删除栈顶元素，若删除成功，则返回TRUE，否则返回FALSE。</p><p>​    Clear（S）：清除堆栈S中的全部元素。</p><h3 id="1-2堆栈的顺序表示"><a href="#1-2堆栈的顺序表示" class="headerlink" title="1.2堆栈的顺序表示"></a>1.2堆栈的顺序表示</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BOOL int  ***自定义BOOL为int型***</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TRUE 1;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FALSE 0;</span></span><br></pre></td></tr></table></figure><p><em><strong>自定义BOOL为int型</strong></em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;</span><br></pre></td></tr></table></figure><p><strong>堆栈结构体定义</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">stack</span>&#123;</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> top;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> maxSize;</span><br><span class="line"></span><br><span class="line">  ElemType *element;</span><br><span class="line"></span><br><span class="line">&#125;Stack;</span><br></pre></td></tr></table></figure><p><strong>建立一个最多能存储maxSize个元素的空堆栈S</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Create</span><span class="params">(Stack *S, <span class="type">int</span> mSize)</span>&#123;</span><br><span class="line"></span><br><span class="line">  S-&gt;maxSize=mSize;</span><br><span class="line"></span><br><span class="line">  S-&gt;element=(ElemType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ElemType)*mSize);</span><br><span class="line"></span><br><span class="line">  S-&gt;top=<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>释放堆栈所占的存储空间</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Destroy</span><span class="params">(Stack *S)</span>&#123;</span><br><span class="line"></span><br><span class="line">  S-&gt;maxSize=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(S-&gt;element);</span><br><span class="line"></span><br><span class="line">  S-&gt;top=<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>若堆栈为空，则返回TRUE，否则返回FALSE</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">IsEmtpy</span><span class="params">(Stack *S)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> S-&gt;top==<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>若堆栈已满，则返回TRUE，否则返回FALSE</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">IsFull</span><span class="params">(Stack *S)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> S-&gt;top==S-&gt;maxSize<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>获取堆栈S的栈顶元素，通过X返回，若获取成功，则返回TRUE，否则返回FALSE</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">Top</span><span class="params">(Stack *S,ElemType *X)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(IsEmtpy(S))</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">  *X=S-&gt;element[S-&gt;top];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> TRUE;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在栈顶位置插入元素X，若插入成功，则返回TRUE，否则返回FALSE</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">Push</span><span class="params">(Stack *S,ElemType X)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(IsFull(S))</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">  S-&gt;top++;</span><br><span class="line"></span><br><span class="line">  S-&gt;element[S-&gt;top]=X;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> TRUE;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>从堆栈中删除栈顶元素，若删除成功，则返回TRUE，否则返回FALSE</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">Pop</span><span class="params">(Stack *S)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(IsEmtpy(S))</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">  S-&gt;top--;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> TRUE;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>清除堆栈S中的全部元素</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Clear</span><span class="params">(Stack *S)</span>&#123;</span><br><span class="line"></span><br><span class="line">  S-&gt;top=<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>主函数测试</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">  Stack S;</span><br><span class="line"></span><br><span class="line">  Create(&amp;S, <span class="number">10</span>);<span class="comment">//创建一个大小为10的堆栈</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">​    Push(&amp;S, i + <span class="number">100</span>);`<span class="comment">//依次赋值100~109</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> number;<span class="comment">//接受栈顶的数据</span></span><br><span class="line"></span><br><span class="line">  Top(&amp;S, &amp;number);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;栈顶的数据为：%d &quot;</span>, number);</span><br><span class="line"></span><br><span class="line">  Destroy(&amp;S);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试结果：</strong></p><p>​    栈顶的数据为：<strong>109</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;堆栈&quot;&gt;&lt;a href=&quot;#堆栈&quot; class=&quot;headerlink&quot; title=&quot;堆栈&quot;&gt;&lt;/a&gt;堆栈&lt;/h2&gt;&lt;h3 id=&quot;1-1堆栈ADT&quot;&gt;&lt;a href=&quot;#1-1堆栈ADT&quot; class=&quot;headerlink&quot; title=&quot;1.1堆栈ADT&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/02/17/hello-world/"/>
    <id>http://example.com/2022/02/17/hello-world/</id>
    <published>2022-02-17T05:43:05.685Z</published>
    <updated>2022-02-24T06:36:38.786Z</updated>
    
    <content type="html"><![CDATA[<!-- ## Quick Start### Create a new post<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a> –&gt;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;!-- 
## Quick Start

### Create a new post

&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;b</summary>
      
    
    
    
    
  </entry>
  
</feed>
